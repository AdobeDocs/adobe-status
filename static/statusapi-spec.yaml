openapi: 3.0.1
info:
  title: Adobe Status API Reference
  description: >
    This guide will help you complete the setup needed to call Status API's. <br /><br />
    
    The following sections contain sample code snippets for generating tokens. Once the setup is complete, you can find the API specs under Events and Registry. 
    All the API's have CLI, Javascript and NodeJS code request samples. <br /><br />
    
    If you chose to use Postman to call the Status API's, please see the section 'Postman Collection'. It has downloadable collection files that you can use to get started. <br /><br />
    
    You will need OAuth token and API key to call Status API's. Please find the sample code below.<br />
    
    <SecurityDefinitions />



    # Code Snippets

    ## NodeJS

    - Make sure `node` installed on your machine

    - Add all required packages into the project eg., `npm install axios`

    - Get the credentials from the developer console website -> 'OAuth Server-to-Server' credentials page of your project and replace the values in the sample code


    ```javascript

    const axios = require("axios")


    const oauth_token_endpoint = 'https://ims-na1.adobelogin.com/ims/token/v3';


    // Get the below values from the developer console project's 'OAuth Server-to-Server' credentials page

    const CLIENT_ID = 'a68bc04-----------92e86df4513ff';

    const CLIENT_SECRET = process.env.CLIENT_SECRET;

    const SCOPES = 'creative_cloud, openid, additional_info.ownerOrg, AdobeID, org.read, read_organizations, additional_info.roles, gnav, additional_info.company, additional_info.projectedProductContext';


    const query_params= `client_id=${CLIENT_ID}`;

    const REQUEST_URL = oauth_token_endpoint + '?' + query_params;



    const get_access_token = async auth_code => {
    
      return await axios ({
        method: 'post',
        url: REQUEST_URL,
        data: {
          'client_secret': CLIENT_SECRET,
          'grant_type': 'client_credentials',
          'scope': SCOPES
        },
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded'
        }
      });
    };


    get_access_token().then((response)=> {
      if(response.status === 200) {
        console.log(response.data); // access token 
      }
    });

    ```

    ## Python

    - Below code tested in Python version 3.9

    - Install requests and os. eg., `pip3 install "requests"`

    - Get the credentials from the developer console website -> 'OAuth Server-to-Server' credentials page of your project and replace the values in the sample code 


    ```python

    import requests
    
    import os


    # Update CLIENT_ID and CLIENT_SECRET with your config

    # which can be obtain from the Adobe Developer Console integration

    CLIENT_ID = "a68bc04-----------92e86df4513ff";

    CLIENT_SECRET = os.environ['CLIENT_SECRET'];

    SCOPES = "creative_cloud, openid, additional_info.ownerOrg, AdobeID, org.read, read_organizations, additional_info.roles, gnav, additional_info.company, additional_info.projectedProductContext";

    headers = {"content-type": "application/x-www-form-urlencoded"}

    url = "https://ims-na1.adobelogin.com/ims/token/v3"


    data = { 
      "client_secret": CLIENT_SECRET,
        "grant_type": "client_credentials",
        "scope": SCOPES
    }

    params = {'client_id': CLIENT_ID}

    response = requests.post(url, params=params, data=data, headers=headers)

    if(response.status_code == 200):
      print(response.text) # access token


    ```


    # Postman Collection 

    - Download Status API postman collection and environment variable from here - [Postman Collection](/adobe-status/postman-collection-and-env.zip)  

    - Import both collection and environment variables into your postman 

    - Replace CLIENT_ID and CLIENT_SECRET in environment variable with yours and run collection endpoints 

    ### Environment Variable Reference

    ![alt text](/adobe-status/images/status-api-env.png "Adobe Status API Environment Variable")

    ### Status API Postman Collection Reference

    ![alt text](/adobe-status/images/status-api-collection.png "Adobe Status API Collection")

    ![alt text](/adobe-status/images/status-api-testing.png "Adobe Status API Collection Endpoint Validation")

    # Throttling Policy
    
    We have a throttling policy in place. We accept up to 50 requests / 5 secs per user's session. Your throttled requests will receive an error codeâ€”HTTP Status 429 (Too Many Requests) response with a Retry-After header, following the [RFC 7231](https://tools.ietf.org/html/rfc7231#section-7.1.3) HTTP standard.


  contact:
    name: Status.adobe
    url: https://status.adobe.com
    email: statuscom-adobe-support@adobe.com
  version: '1.0'
servers:
  - url: https://status.adobe.io/
security:
  - Authorization: []
    api_key: []
tags:
  - name: Events
    description: >-
      Query and view all ongoing events, events from the past 40 days, and
      future maintenance, that will impact Adobe Products and Services.
  - name: Registry
    description: Query and view the product taxonomy of Adobe Products and Services.
  - name: Subscriptions
    description: >-
      Subscribe to Adobe Products and Offerings to receive email notifications about ongoing events, incidents, and maintenance impacting them.
paths:
  /api/v1/clouds:
    get:
      tags:
        - Registry
      summary: Clouds
      description: List the top-level product families for all Adobe Products and Services.
      operationId: cloudsUsingGET
      parameters:
        - name: cloudId
          in: query
          description: List of cloud ids for which you want to retrieve the cloud detail.
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: cloudName
          in: query
          description: Partial or complete cloud name for which you want to retrieve the cloud detail.
          style: form
          explode: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Cloud'
        '400':
          description: Bad Request
          content: {}
        '401':
          description: Unauthorized
          content: {}
        '403':
          description: Forbidden
          content: {}
        '404':
          description: Not Found
          content: {}
        '429':
          description: Too Many Requests
          content: {}
        '500':
          description: Internal Server Error
          content: {}
      x-codeSamples:
        - lang: cURL
          label: CLI
          source: >-
            curl --location --request GET 'https://status.adobe.io/api/v1/clouds?api_key=<key>&cloudId=<string>' \
            --header 'Authorization: Bearer <token>'
        - lang: JavaScript
          label: JavaScript
          source: {$ref: code/JS/clouds.js}
        - lang: JavaScript
          label: NodeJS
          source: {$ref: code/Node/clouds.js}
  /api/v1/products:
    get:
      tags:
        - Registry
      summary: Products
      description: List all the Adobe Products and Services across Clouds.
      operationId: productsUsingGET
      parameters:
        - name: cloudId
          in: query
          description: List of cloud ids for which you want to retrieve the events.
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: productId
          in: query
          description: List of product ids for which you want to retrieve the product detail.
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: productName
          in: query
          description: Partial or complete product name for which you want to retrieve the product detail.
          style: form
          explode: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        '400':
          description: Bad Request
          content: {}
        '401':
          description: Unauthorized
          content: {}
        '403':
          description: Forbidden
          content: {}
        '404':
          description: Not Found
          content: {}
        '429':
          description: Too Many Requests
          content: {}
        '500':
          description: Internal Server Error
          content: {}
      x-codeSamples:
        - lang: cURL
          label: CLI
          source: >-
            curl --location --request GET 'https://status.adobe.io/api/v1/products?api_key=<key>&cloudId=<string>&productId=<string>' \
            --header 'Authorization: Bearer <token>'
        - lang: JavaScript
          label: JavaScript
          source: {$ref: code/JS/products.js}
        - lang: JavaScript
          label: NodeJS
          source: {$ref: code/Node/products.js}
  /api/v1/eventTypes:
    get:
      tags:
        - Registry
      summary: Event Types
      description: >-
        List all the types of events that can impact Adobe Products and
        Services.
      operationId: eventTypesUsingGET
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: string
        '400':
          description: Bad Request
          content: {}
        '401':
          description: Unauthorized
          content: {}
        '403':
          description: Forbidden
          content: {}
        '404':
          description: Not Found
          content: {}
        '429':
          description: Too Many Requests
          content: {}
        '500':
          description: Internal Server Error
          content: {}
      x-codeSamples:
        - lang: cURL
          label: CLI
          source: >-
            curl --location --request GET 'https://status.adobe.io/api/v1/eventTypes?api_key=<key>' \
            --header 'Authorization: Bearer <token>'
        - lang: JavaScript
          label: JavaScript
          source: {$ref: code/JS/eventtypes.js}
        - lang: JavaScript
          label: NodeJS
          source: {$ref: code/Node/eventtypes.js}
  /api/v1/events:
    get:
      tags:
        - Events
      summary: All Events
      description: >-
        List all ongoing issues and maintenances that are impacting Adobe
        Products and Services.
      operationId: eventsUsingGET
      parameters:
        - name: cloudIds
          in: query
          description: List of cloud ids for which you want to retrieve the events.
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: environmentIds
          in: query
          description: List of environmentIds for which you want to retrieve the events.
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: from
          in: query
          description: Retrieve the events starting from Date (yyyy-MM-dd format).
          schema:
            type: string
            format: date
        - name: offeringIds
          in: query
          description: List of offeringIds for which you want to retrieve the events.
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: productIds
          in: query
          description: List of product ids for which you want to retrieve the events.
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: regionIds
          in: query
          description: List of regionIds for which you want to retrieve the events.
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: search
          in: query
          description: Product name search
          schema:
            type: string
        - name: serviceIds
          in: query
          description: List of serviceIds for which you want to retrieve the events.
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: to
          in: query
          description: Retrieve the events till Date (yyyy-MM-dd format).
          schema:
            type: string
            format: date
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '400':
          description: Bad Request
          content: {}
        '401':
          description: Unauthorized
          content: {}
        '403':
          description: Forbidden
          content: {}
        '404':
          description: Not Found
          content: {}
        '429':
          description: Too Many Requests
          content: {}
        '500':
          description: Internal Server Error
          content: {}
      x-codeSamples:
        - lang: cURL
          label: CLI
          source: >-
            curl --location --request GET
            'https://status.adobe.io/api/v1/events?api_key=<key>&cloudIds=<string>&environmentIds=<string>&from=<date>&offeringIds=<string>&productIds=<string>&regionIds=<string>&search=<string>&serviceIds=<string>&to=<date>' \
            --header 'Authorization: Bearer <token>'
        - lang: JavaScript
          label: JavaScript
          source: {$ref: code/JS/event.js}
        - lang: JavaScript
          label: NodeJS
          source: {$ref: code/Node/event.js}
  /api/v1/events/incidents:
    get:
      tags:
        - Events
      summary: All Issues
      description: List all ongoing issues that are impacting Adobe Products and Services.
      operationId: incidentsUsingGET
      parameters:
        - name: cloudIds
          in: query
          description: List of cloud ids for which you want to retrieve the incidents.
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: environmentIds
          in: query
          description: List of environmentIds for which you want to retrieve the incidents.
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: from
          in: query
          description: Retrieve the events starting from Date (yyyy-MM-dd format).
          schema:
            type: string
            format: date
        - name: offeringIds
          in: query
          description: List of offeringIds for which you want to retrieve the incidents.
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: productIds
          in: query
          description: List of product ids for which you want to retrieve the incidents.
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: regionIds
          in: query
          description: List of regionIds for which you want to retrieve the incidents.
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: search
          in: query
          description: Product name search
          schema:
            type: string
        - name: serviceIds
          in: query
          description: List of serviceIds for which you want to retrieve the incidents.
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: to
          in: query
          description: Retrieve the events till Date (yyyy-MM-dd format).
          schema:
            type: string
            format: date
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/IncidentDto'
        '400':
          description: Bad Request
          content: {}
        '401':
          description: Unauthorized
          content: {}
        '403':
          description: Forbidden
          content: {}
        '404':
          description: Not Found
          content: {}
        '429':
          description: Too Many Requests
          content: {}
        '500':
          description: Internal Server Error
          content: {}
      x-codeSamples:
        - lang: cURL
          label: CLI
          source: >-
            curl --location --request GET 'https://status.adobe.io/api/v1/events/incidents?api_key=<key>&cloudIds=<string>&environmentIds=<string>&from=<date>&offeringIds=<string>&productIds=<string>&regionIds=<string>&search=<string>&serviceIds=<string>&to=<date>' \
            --header 'Authorization: Bearer <token>'
        - lang: JavaScript
          label: JavaScript
          source: {$ref: code/JS/incident.js}
        - lang: JavaScript
          label: NodeJS
          source: {$ref: code/Node/incident.js}
  /api/v1/events/maintenance:
    get:
      tags:
        - Events
      summary: All Maintenances
      description: >-
        List all ongoing maintenances that are impacting Adobe Products and
        Services.
      operationId: maintenanceUsingGET
      parameters:
        - name: cloudIds
          in: query
          description: List of cloud ids for which you want to retrieve the Maintenance.
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: environmentIds
          in: query
          description: >-
            List of environmentIds for which you want to retrieve the
            Maintenance.
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: from
          in: query
          description: Retrieve the events starting from Date (yyyy-MM-dd format).
          schema:
            type: string
            format: date
        - name: offeringIds
          in: query
          description: List of offeringIds for which you want to retrieve the Maintenance.
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: productIds
          in: query
          description: List of product ids for which you want to retrieve the Maintenance.
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: regionIds
          in: query
          description: List of regionIds for which you want to retrieve the Maintenance.
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: search
          in: query
          description: Product name search
          schema:
            type: string
        - name: serviceIds
          in: query
          description: List of serviceIds for which you want to retrieve the Maintenance.
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: to
          in: query
          description: Retrieve the events till Date (yyyy-MM-dd format).
          schema:
            type: string
            format: date
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MaintenanceDto'
        '400':
          description: Bad Request
          content: {}
        '401':
          description: Unauthorized
          content: {}
        '403':
          description: Forbidden
          content: {}
        '404':
          description: Not Found
          content: {}
        '429':
          description: Too Many Requests
          content: {}
        '500':
          description: Internal Server Error
          content: {}
      x-codeSamples:
        - lang: cURL
          label: CLI
          source: >-
            curl --location --request GET 'https://status.adobe.io/api/v1/events/maintenance?api_key=<key>&cloudIds=<string>&environmentIds=<string>&from=<date>&offeringIds=<string>&productIds=<string>&regionIds=<string>&search=<string>&serviceIds=<string>&to=<date>' \
            --header 'Authorization: Bearer <token>'
        - lang: JavaScript
          label: JavaScript
          source: {$ref: code/JS/maintenance.js}
        - lang: JavaScript
          label: NodeJS
          source: {$ref: code/Node/maintenance.js}
  /api/v1/events/scheduled:
    get:
      tags:
        - Events
      summary: All Scheduled Maintenances
      description: >-
        View all upcoming scheduled maintenances that are impacting Adobe
        Products and Services.
      operationId: scheduledUsingGET
      parameters:
        - name: cloudIds
          in: query
          description: List of cloud ids for which you want to retrieve the Maintenance.
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: environmentIds
          in: query
          description: >-
            List of environmentIds for which you want to retrieve the
            Maintenance.
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: from
          in: query
          description: Retrieve the events starting from Date (yyyy-MM-dd format).
          schema:
            type: string
            format: date
        - name: offeringIds
          in: query
          description: List of offeringIds for which you want to retrieve the Maintenance.
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: productIds
          in: query
          description: List of product ids for which you want to retrieve the Maintenance.
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: regionIds
          in: query
          description: List of regionIds for which you want to retrieve the Maintenance.
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: search
          in: query
          description: Product name search
          schema:
            type: string
        - name: serviceIds
          in: query
          description: List of serviceIds for which you want to retrieve the Maintenance.
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: to
          in: query
          description: Retrieve the events till Date (yyyy-MM-dd format).
          schema:
            type: string
            format: date
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MaintenanceDto'
        '400':
          description: Bad Request
          content: {}
        '401':
          description: Unauthorized
          content: {}
        '403':
          description: Forbidden
          content: {}
        '404':
          description: Not Found
          content: {}
        '429':
          description: Too Many Requests
          content: {}
        '500':
          description: Internal Server Error
          content: {}
      x-codeSamples:
        - lang: cURL
          label: CLI
          source: >-
            curl --location --request GET 'https://status.adobe.io/api/v1/events/scheduled?api_key=<key>&cloudIds=<string>&environmentIds=<string>&from=<date>&offeringIds=<string>&productIds=<string>&regionIds=<string>&search=<string>&serviceIds=<string>&to=<date>' \
            --header 'Authorization: Bearer <token>'
        - lang: JavaScript
          label: JavaScript
          source: {$ref: code/JS/scheduled.js}
        - lang: JavaScript
          label: NodeJS
          source: {$ref: code/Node/scheduled.js}
  /api/v1/regions:
    get:
      tags:
        - Registry
      summary: Regions
      description: List all the regions that can be impacted by Adobe Status Events.
      operationId: regionsUsingGET
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RegionDto'
        '400':
          description: Bad Request
          content: {}
        '401':
          description: Unauthorized
          content: {}
        '403':
          description: Forbidden
          content: {}
        '404':
          description: Not Found
          content: {}
        '429':
          description: Too Many Requests
          content: {}
        '500':
          description: Internal Server Error
          content: {}
      x-codeSamples:
        - lang: cURL
          label: CLI
          source: >-
            curl --location --request GET 'https://status.adobe.io/api/v1/regions?api_key=<key>' \
            --header 'Authorization: Bearer <token>'
        - lang: JavaScript
          label: JavaScript
          source: {$ref: code/JS/regions.js}
        - lang: JavaScript
          label: NodeJS
          source: {$ref: code/Node/regions.js}
  /api/v1/locales:
    get:
      tags:
        - Registry
      summary: Locales
      description: >-
        List all the locales for the messages for an event impacting Adobe
        products.
      operationId: localesUsingGET
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LocaleDto'
        '400':
          description: Bad Request
          content: {}
        '401':
          description: Unauthorized
          content: {}
        '403':
          description: Forbidden
          content: {}
        '404':
          description: Not Found
          content: {}
        '429':
          description: Too Many Requests
          content: {}
        '500':
          description: Internal Server Error
          content: {}
      x-codeSamples:
        - lang: cURL
          label: CLI
          source: >-
            curl --location --request GET 'https://status.adobe.io/api/v1/locales?api_key=<key>' \
            --header 'Authorization: Bearer <token>'
        - lang: JavaScript
          label: JavaScript
          source: {$ref: code/JS/locales.js}
        - lang: JavaScript
          label: NodeJS
          source: {$ref: code/Node/locales.js}
  /api/v1/messages:
    get:
      tags:
        - Registry
      summary: Messages
      description: List all the messages for an event impacting Adobe products.
      operationId: messagesUsingGET
      parameters:
        - name: messageToken
          in: query
          description: Message token for which you want to retrieve the messages.
          style: form
          explode: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MessagesDto'
        '400':
          description: Bad Request
          content: {}
        '401':
          description: Unauthorized
          content: {}
        '403':
          description: Forbidden
          content: {}
        '404':
          description: Not Found
          content: {}
        '429':
          description: Too Many Requests
          content: {}
        '500':
          description: Internal Server Error
          content: {}
      x-codeSamples:
        - lang: cURL
          label: CLI
          source: >-
            curl --location --request GET 'https://status.adobe.io/api/v1/messages?api_key=<key>' \
            --header 'Authorization: Bearer <token>'
        - lang: JavaScript
          label: JavaScript
          source: {$ref: code/JS/messages.js}
        - lang: JavaScript
          label: NodeJS
          source: {$ref: code/Node/messages.js}
  /api/v1/messages/{locale}:
    get:
      tags:
        - Registry
      summary: Messages By Locale
      description: >-
        List all the messages for a locale, for an event impacting Adobe
        products.<br /> <b>Note:</b> Use Locales API(`/api/v1/locales`) to get
        supported locales
      operationId: messagesUsingGET_1
      parameters:
        - name: locale
          in: path
          description: Locale for fetching message details.
          required: true
          schema:
            type: string
        - name: messageToken
          in: query
          description: Message token for which you want to retrieve the messages.
          style: form
          explode: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MessagesDto'
        '400':
          description: Bad Request
          content: {}
        '401':
          description: Unauthorized
          content: {}
        '403':
          description: Forbidden
          content: {}
        '404':
          description: Not Found
          content: {}
        '429':
          description: Too Many Requests
          content: {}
        '500':
          description: Internal Server Error
          content: {}
      x-codeSamples:
        - lang: cURL
          label: CLI
          source: >-
            curl --location --request GET 'https://status.adobe.io/api/v1/messages/es?api_key=<key>' \
            --header 'Authorization: Bearer <token>'
        - lang: JavaScript
          label: JavaScript
          source: {$ref: code/JS/messagesbylocale.js}
        - lang: JavaScript
          label: NodeJS
          source: {$ref: code/Node/messagesbylocale.js}
  /api/v1/subscriptionCatalog:
    get:
      tags:
        - Subscriptions
      summary: Subscription Catalog
      description: |
        List all products available for subscription with their details.
        
        In the response, each Product has id, name, product offerings (if any), regions and event types.
        > Exception: For three products, Acrobat Sign, Adobe Connect and Adobe Marketo Engage, 
        subscriptions are managed at environment level instead of regions.
         The attribute "regions" will have environment values for these products.<br /> As all offerings might not be available in all environments, the product offerings(if any) will have an extra detail named regions which has environment values specific to the offering.
      operationId: subscriptionCatalogUsingGET
      parameters:
        - name: productIds
          in: query
          description: List of product ids for which details are to be retrieved.
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: productName
          in: query
          description: Partial or complete product name for which details are to be retrieved..
          style: form
          explode: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionCatalog'
        '400':
          description: Bad Request
          content: {}
        '401':
          description: Unauthorized
          content: {}
        '403':
          description: Forbidden
          content: {}
        '404':
          description: Not Found
          content: {}
        '429':
          description: Too Many Requests
          content: {}
        '500':
          description: Internal Server Error
          content: {}
      x-codeSamples:
        - lang: cURL
          label: CLI
          source: >-
            curl --location --request GET
            'https://status.adobe.io/api/v1/subscriptionCatalog?api_key=<key>&productNames=<string>' \
            --header 'Authorization: Bearer <token>'
        - lang: JavaScript
          label: JavaScript
          source: {$ref: code/JS/subscriptioncatalog.js}
        - lang: JavaScript
          label: NodeJS
          source: {$ref: code/Node/subscriptioncatalog.js}
  /api/v1/subscriptions:
    get:
      tags:
        - Subscriptions
      summary: Get Subscriptions
      description: >-
        List all products that the user is subscribed to, with the details specific to the subscription.
      operationId: subscriptionsUsingGET
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionCatalog'
        '400':
          description: Bad Request
          content: {}
        '401':
          description: Unauthorized
          content: {}
        '403':
          description: Forbidden
          content: {}
        '404':
          description: Not Found
          content: {}
        '429':
          description: Too Many Requests
          content: {}
        '500':
          description: Internal Server Error
          content: {}
      security:
        - Authorization: [ ]
          api_key: [ ]
          user_token: [ ]
      x-codeSamples:
        - lang: cURL
          label: CLI
          source: >-
            curl --location --request GET
            'https://status.adobe.io/api/v1/subscriptions?api_key=<key>&productNames=<string>' \
            --header 'Authorization: Bearer <token>' --header 'x-user-token: <user_token>'
        - lang: JavaScript
          label: JavaScript
          source: {$ref: code/JS/getsubscriptions.js}
        - lang: JavaScript
          label: NodeJS
          source: {$ref: code/Node/getsubscriptions.js}
    post:
      tags:
        - Subscriptions
      summary: Update Subscriptions
      description: |
        Update user's subscriptions.<br /> Any product with no existing subscription is considered as a new subscription.<br /> Any product with an existing subscription is considered as a modification and the existing subscription is replaced as per the details in the request.
                             
        For every product subscription, id, product offerings(if any), regions and event types are to be sent in the request .              
        Any existing subscriptions for the products which are not sent in the request will remain unchanged.
        
        > Note: The payload structure is same for all the products including Acrobat Sign, Adobe Connect and Adobe Marketo Engage.
      operationId: subscriptionsUsingPOST
      requestBody:
        description: Request body containing details of subscriptions to be added or modified.
        required: true  # Marking the body as required
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubscriptionRequest'
      responses:
        '201':
          description: CREATED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionUpdateResponse'
        '400':
          description: Bad Request
          content: {}
        '401':
          description: Unauthorized
          content: {}
        '403':
          description: Forbidden
          content: {}
        '404':
          description: Not Found
          content: {}
        '429':
          description: Too Many Requests
          content: {}
        '500':
          description: Internal Server Error
          content: {}
      security:
        - Authorization: [ ]
          api_key: [ ]
          user_token: [ ]
      x-codeSamples:
        - lang: cURL
          label: CLI
          source: >-
            curl --location --request POST
            'https://status.adobe.io/api/v1/subscriptions?api_key=<key>' \
            --header 'Content-Type: application/json' \
            --header 'Authorization: Bearer <token>' --header 'x-user-token: <user_token>' --data-raw <json_payload>
        - lang: JavaScript
          label: JavaScript
          source: {$ref: code/JS/postsubscriptions.js}
        - lang: JavaScript
          label: NodeJS
          source: {$ref: code/Node/postsubscriptions.js}
    delete:
      tags:
        - Subscriptions
      summary: Delete Subscriptions
      description: >-
        Delete subscriptions on specific products or all subscriptions of the user.
      operationId: subscriptionsUsingDELETE
      parameters:
        - name: productIds
          in: query
          description: List of product ids for which the user should be unsubscribed. If not provided, all subscriptions will be removed.
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: OK
          content: { }
        '400':
          description: Bad Request
          content: { }
        '401':
          description: Unauthorized
          content: { }
        '403':
          description: Forbidden
          content: { }
        '404':
          description: Not Found
          content: { }
        '429':
          description: Too Many Requests
          content: { }
        '500':
          description: Internal Server Error
          content: { }
      security:
        - Authorization: [ ]
          api_key: [ ]
          user_token: [ ]
      x-codeSamples:
        - lang: cURL
          label: CLI
          source: >-
            curl --location --request DELETE
            'https://status.adobe.io/api/v1/subscriptions?api_key=<key>&productIds=<string>' \
            --header 'Authorization: Bearer <token>' --header 'x-user-token: <user_token>'
        - lang: JavaScript
          label: JavaScript
          source: {$ref: code/JS/deletesubscriptions.js}
        - lang: JavaScript
          label: NodeJS
          source: {$ref: code/Node/deletesubscriptions.js}
components:
  schemas:
    Cloud:
      title: Cloud
      type: object
      properties:
        cloudProducts:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/CloudProduct'
        id:
          type: string
        name:
          type: string
    CloudProduct:
      title: CloudProduct
      type: object
      properties:
        id:
          type: string
        name:
          type: string
    Environment:
      title: Environment
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        regionId:
          uniqueItems: true
          type: array
          items:
            type: string
    Error:
      title: Error
      type: object
      properties:
        error_code:
          type: string
        message:
          type: string
    Event:
      title: Event
      type: object
      properties:
        incidents:
          type: array
          items:
            $ref: '#/components/schemas/IncidentDto'
        maintenances:
          type: array
          items:
            $ref: '#/components/schemas/MaintenanceDto'
    EventCapabilities:
      title: EventCapabilities
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        productServices:
          uniqueItems: true
          type: array
          items:
            type: string
    EventCloud:
      title: EventCloud
      type: object
      properties:
        cloudProducts:
          uniqueItems: true
          type: array
          items:
            type: string
        id:
          type: string
        name:
          type: string
    EventEnvironment:
      title: EventEnvironment
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        serviceRegions:
          uniqueItems: true
          type: array
          items:
            type: string
    EventOffering:
      title: EventOffering
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        productCapabilities:
          uniqueItems: true
          type: array
          items:
            type: string
        productServices:
          uniqueItems: true
          type: array
          items:
            type: string
    EventOfferingDto:
      title: EventOfferingDto
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        productServices:
          uniqueItems: true
          type: array
          items:
            type: string
    EventRegion:
      title: EventRegion
      type: object
      properties:
        id:
          type: string
        name:
          type: string
    EventServices:
      title: EventServices
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        serviceEnvironments:
          uniqueItems: true
          type: array
          items:
            type: string
    Events:
      title: Events
      type: object
      properties:
        incidentEvent:
          $ref: '#/components/schemas/IncidentDetails'
        maintenanceEvent:
          $ref: '#/components/schemas/MaintenanceDetails'
    ImpactedServices:
      title: ImpactedServices
      type: object
      properties:
        productCapabilities:
          uniqueItems: true
          type: array
          items:
            type: string
        productOfferings:
          uniqueItems: true
          type: array
          items:
            type: string
        productServices:
          uniqueItems: true
          type: array
          items:
            type: string
    Incident:
      title: Incident
      type: object
      properties:
        capabilities:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/EventCapabilities'
        clouds:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/EventCloud'
        environments:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/EventEnvironment'
        id:
          type: string
        offerings:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/EventOffering'
        products:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/IncidentProduct'
        regions:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/EventRegion'
        services:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/EventServices'
    IncidentDetails:
      title: IncidentDetails
      type: object
      properties:
        incidents:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/Incident'
        messages:
          type: object
          additionalProperties:
            type: object
            additionalProperties:
              $ref: '#/components/schemas/Message'
    IncidentDto:
      title: IncidentDto
      type: object
      properties:
        clouds:
          type: array
          items:
            $ref: '#/components/schemas/EventCloud'
        environment:
          type: array
          items:
            $ref: '#/components/schemas/EventEnvironment'
        id:
          type: string
        offering:
          type: array
          items:
            $ref: '#/components/schemas/EventOfferingDto'
        products:
          type: array
          items:
            $ref: '#/components/schemas/IncidentProductDto'
        region:
          type: array
          items:
            $ref: '#/components/schemas/EventRegion'
        services:
          type: array
          items:
            $ref: '#/components/schemas/EventServices'
    IncidentHistoryEvent:
      title: IncidentHistoryEvent
      required:
        - customerImpact
        - messageType
        - operationsImpact
        - previousCustomerImpact
        - previousOperationsImpact
        - previousSeverity
        - previousStatus
        - severity
        - showEnvironment
        - status
      type: object
      properties:
        cfsId:
          type: string
        cfsSource:
          type: string
        customerImpact:
          type: string
          enum:
            - Most
            - None
            - Some
            - Unknown
        id:
          type: string
        isEndDateChanged:
          type: boolean
        isStartDateChanged:
          type: boolean
        locationImpact:
          $ref: '#/components/schemas/LocationImpact'
        messageTime:
          minimum: 1
          exclusiveMinimum: false
          type: integer
          format: int64
        messageToken:
          type: string
        messageType:
          type: string
          enum:
            - CFS
            - Canned
            - Custom
            - None
        operationsImpact:
          type: string
          enum:
            - Availability
            - None
            - Performance
            - Unknown
        previousCustomerImpact:
          type: string
          enum:
            - Most
            - None
            - Some
            - Unknown
        previousOperationsImpact:
          type: string
          enum:
            - Availability
            - None
            - Performance
            - Unknown
        previousSeverity:
          type: string
          enum:
            - Major
            - Minor
            - None
            - Potential
            - Trivial
        previousStatus:
          type: string
          enum:
            - Closed
            - Discovery
            - Dismissed
            - None
            - Opened
        serviceImpact:
          $ref: '#/components/schemas/ImpactedServices'
        severity:
          type: string
          enum:
            - Major
            - Minor
            - None
            - Potential
            - Trivial
        showEnvironment:
          type: boolean
        status:
          type: string
          enum:
            - Closed
            - Discovery
            - Dismissed
            - None
            - Opened
        statusTime:
          type: integer
          format: int64
        titleToken:
          type: string
    IncidentHistoryEventDto:
      title: IncidentHistoryEventDto
      type: object
      properties:
        cfsId:
          type: string
        cfsSource:
          type: string
        cfsURL:
          type: string
        customerImpact:
          type: string
          enum:
            - Most
            - None
            - Some
            - Unknown
        id:
          type: string
        locationImpact:
          $ref: '#/components/schemas/LocationImpact'
        messageTime:
          type: string
        messageToken:
          type: string
        messageType:
          type: string
          enum:
            - CFS
            - Canned
            - Custom
            - None
        operationsImpact:
          type: string
          enum:
            - Availability
            - None
            - Performance
            - Unknown
        serviceImpact:
          $ref: '#/components/schemas/ImpactedServices'
        severity:
          type: string
          enum:
            - Major
            - Minor
            - None
            - Potential
            - Trivial
        showEnvironment:
          type: boolean
        status:
          type: string
          enum:
            - Closed
            - Discovery
            - Dismissed
            - None
            - Opened
        titleToken:
          type: string
    IncidentProduct:
      title: IncidentProduct
      type: object
      properties:
        endedOn:
          type: integer
          format: int64
        history:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/IncidentHistoryEvent'
        id:
          type: string
        name:
          type: string
        startedOn:
          minimum: 1
          exclusiveMinimum: false
          type: integer
          format: int64
    IncidentProductDto:
      title: IncidentProductDto
      type: object
      properties:
        endedOn:
          type: string
        history:
          type: array
          items:
            $ref: '#/components/schemas/IncidentHistoryEventDto'
        id:
          type: string
        name:
          type: string
        severity:
          type: string
          enum:
            - Major
            - Minor
            - None
            - Potential
            - Trivial
        startedOn:
          type: string
        status:
          type: string
          enum:
            - Closed
            - Empty
            - Opened
    LocaleDto:
      title: LocaleDto
      type: object
      properties:
        languageName:
          type: string
        localeCode:
          type: string
    LocationImpact:
      title: LocationImpact
      type: object
      properties:
        serviceEnvironments:
          uniqueItems: true
          type: array
          items:
            type: string
        serviceRegions:
          uniqueItems: true
          type: array
          items:
            type: string
    Maintenance:
      title: Maintenance
      required:
        - cmrStatus
        - status
        - type
      type: object
      properties:
        capabilities:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/EventCapabilities'
        clouds:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/EventCloud'
        cmrStatus:
          type: string
          enum:
            - Canceled
            - Completed
            - Empty
            - Scheduled
            - Started
        completedOn:
          minimum: 1
          exclusiveMinimum: false
          type: integer
          format: int64
        environments:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/EventEnvironment'
        id:
          type: string
        offerings:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/EventOffering'
        products:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/MaintenanceProduct'
        regions:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/EventRegion'
        reminderDate:
          uniqueItems: true
          type: array
          items:
            type: integer
            format: int64
        scheduledDate:
          type: integer
          format: int64
        services:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/EventServices'
        startedOn:
          minimum: 1
          exclusiveMinimum: false
          type: integer
          format: int64
        status:
          type: string
          enum:
            - Canceled
            - Completed
            - Empty
            - Scheduled
            - Started
        type:
          type: string
          enum:
            - Empty
            - Normal
            - Scheduled
            - Urgent
    MaintenanceDetails:
      title: MaintenanceDetails
      type: object
      properties:
        maintenance:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/Maintenance'
        messages:
          type: object
          additionalProperties:
            type: object
            additionalProperties:
              $ref: '#/components/schemas/Message'
    MaintenanceDto:
      title: MaintenanceDto
      type: object
      properties:
        clouds:
          type: array
          items:
            $ref: '#/components/schemas/EventCloud'
        completedOn:
          type: string
        environment:
          type: array
          items:
            $ref: '#/components/schemas/EventEnvironment'
        id:
          type: string
        maintenanceType:
          type: string
          enum:
            - Empty
            - Normal
            - Scheduled
            - Urgent
        offering:
          type: array
          items:
            $ref: '#/components/schemas/EventOfferingDto'
        products:
          type: array
          items:
            $ref: '#/components/schemas/MaintenanceProductDto'
        region:
          type: array
          items:
            $ref: '#/components/schemas/EventRegion'
        reminderDate:
          uniqueItems: true
          type: array
          items:
            type: string
        scheduledDate:
          type: string
        services:
          type: array
          items:
            $ref: '#/components/schemas/EventServices'
        startedOn:
          type: string
        status:
          type: string
          enum:
            - Canceled
            - Completed
            - Empty
            - Scheduled
            - Started
    MaintenanceHistoryEvent:
      title: MaintenanceHistoryEvent
      required:
        - customerImpact
        - messageType
        - operationsImpact
        - showEnvironment
        - status
      type: object
      properties:
        customerImpact:
          type: string
          enum:
            - Most
            - None
            - Some
            - Unknown
        id:
          type: string
        locationImpact:
          $ref: '#/components/schemas/LocationImpact'
        messageTime:
          minimum: 1
          exclusiveMinimum: false
          type: integer
          format: int64
        messageToken:
          type: string
        messageType:
          type: string
          enum:
            - Canned
            - Custom
        operationsImpact:
          type: string
          enum:
            - Availability
            - None
            - Performance
            - Unknown
        serviceImpact:
          $ref: '#/components/schemas/ImpactedServices'
        showEnvironment:
          type: boolean
        status:
          type: string
          enum:
            - Cancelled
            - Completed
            - Empty
            - Scheduled
            - Started
            - Updated
        titleToken:
          type: string
    MaintenanceProduct:
      title: MaintenanceProduct
      type: object
      properties:
        history:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/MaintenanceHistoryEvent'
        id:
          type: string
        name:
          type: string
    MaintenanceProductDto:
      title: MaintenanceProductDto
      type: object
      properties:
        history:
          type: array
          items:
            $ref: '#/components/schemas/MaintenanceHistoryEvent'
        id:
          type: string
        name:
          type: string
    Message:
      title: Message
      type: object
      properties:
        htmlMessage:
          type: string
        textMessage:
          type: string
        token:
          type: string
    MessagesDto:
      title: MessagesDto
      type: object
      properties:
        incidentMessages:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/Message'
        languageCode:
          type: string
        maintenanceMessages:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/Message'
    Offering:
      title: Offering
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        productServices:
          uniqueItems: true
          type: array
          items:
            type: string
    Product:
      title: Product
      type: object
      properties:
        environments:
          type: array
          items:
            $ref: '#/components/schemas/Environment'
        id:
          type: string
        name:
          type: string
        productOfferings:
          type: array
          items:
            $ref: '#/components/schemas/Offering'
        productServices:
          type: array
          items:
            $ref: '#/components/schemas/ProductService'
        regions:
          type: array
          items:
            $ref: '#/components/schemas/RegionDto'
    ProductService:
      title: ProductService
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        serviceEnvironments:
          uniqueItems: true
          type: array
          items:
            type: string
    RegionDto:
      title: RegionDto
      type: object
      properties:
        id:
          type: string
        name:
          type: string
    SubscriptionCatalog:
      title: SubscriptionCatalog
      type: object
      properties:
        products:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/SubscriptionProduct'
          example:
            "productId1":
              id: "productId1"
              name: "Product 1"
              offeringId1:
                id: "offeringId1"
                name: "Offering 1"
                regions:
                  regionId1:
                    id: "regionId1"
                    name: "Region 1"
                eventTypes:
                  eventId1:
                    id: "eventId1"
                    name: "Event Type 1"
            "productId2":
              id: "productId2"
              name: "Product 2"
              offeringId21:
                id: "offeringId21"
                name: "Offering 21"
                regions:
              regions:
                regionId21:
                  id: "regionId21"
                  name: "Region 21"
              eventTypes:
                eventTypeId1:
                  id: "eventId1"
                  name: "Event Type 1"
    SubscriptionProduct:
      title: SubscriptionProduct
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        productOfferings:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/SubscriptionProductOffering'
        regions:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/SubscriptionProductRegion'
        eventTypes:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/SubscriptionProductEventType'
    SubscriptionProductOffering:
      title: SubscriptionProductOffering
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        regions:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/SubscriptionProductRegion'
    SubscriptionProductRegion:
      title: SubscriptionProductRegion
      type: object
      properties:
        id:
          type: string
        name:
          type: string
    SubscriptionProductEventType:
      title: SubscriptionProductEventType
      type: object
      properties:
        id:
          type: string
        name:
          type: string
    SubscriptionRequest:
      title: SubscriptionRequest
      type: object
      properties:
        products:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/SubscriptionRequestProduct'
          example:
            "productId1":
              id: "productId1"
              name: "Product 1"
              productOfferings: ["offeringId1", "offeringId2"]
              regions: ["regionId1", "regionId2"]
              eventTypes: ["eventTypeId1", "eventTypeId2"]
    SubscriptionRequestProduct:
      title: SubscriptionRequestProduct
      type: object
      properties:
        id:
          type: string
        productOfferings:
          type: array
          items:
            type: string
        regions:
          type: array
          items:
            type: string
        eventTypes:
          type: array
          items:
            type: string
    SubscriptionProductOverview:
      title: SubscriptionProductOverview
      type: object
      properties:
        id:
          type: string
        name:
          type: string
    SubscriptionUpdateResponse:
      title: SubscriptionUpdateResponse
      type: object
      properties:
        subscriptionsCreated:
          type: array
          items:
            type: object
            $ref: '#/components/schemas/SubscriptionProductOverview'
        subscriptionsModified:
          type: array
          items:
            type: object
            $ref: '#/components/schemas/SubscriptionProductOverview'
  securitySchemes:
    Authorization:
      description: >-
        [To generate OAuth Authorization
        token](https://developer.adobe.com/developer-console/docs/guides/authentication/ServerToServerAuthentication/implementation/)
      type: http
      scheme: bearer
    api_key:
      type: apiKey
      description: Use the api key `StatusAdobeIOClient`
      name: api_key
      in: query
    user_token:
      type: apiKey
      description: >-
        [To generate token for user-specific access](https://developer.adobe.com/developer-console/docs/guides/authentication/UserAuthentication/implementation/)
      name: x-user-token
      in: header